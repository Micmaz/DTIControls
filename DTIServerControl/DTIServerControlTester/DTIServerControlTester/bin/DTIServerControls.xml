<?xml version="1.0"?>
<doc>
<assembly>
<name>
DTIServerControls
</name>
</assembly>
<members>
<member name="E:DTIServerControls.DTIServerControl.ModeChanged">
	<summary>
 Fired when a control goes from read mode to write or layout mode.
 </summary>
	<remarks></remarks>
</member><member name="T:DTIServerControls.DTIServerControl">
	<summary>
 Base class for DTIControls. Adds state awareness (read/write/layout) awareness as well as setup panel plugins to easily edit data.
 </summary>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.Session">
	<summary>
 A subclassed session state to provide design time support for any property that uses session.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.MasterMainId">
	<summary>
 The default mainID. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.siteEditMainID">
	<summary>
 The LanguageID that the current administrator has edit access to.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.siteEditLanguageId">
	<summary>
 The Default Language id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.MasterLanguageId">
	<summary>
 The Default Language id
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTISharedVariables.UploadFolderDefault">
	<summary>
 Default upload folder. The webserver must have write access to this folder. 
 </summary>
	<value>"/uploads/"</value>
	<returns>The currently selected upload folder.</returns>
	<remarks></remarks>
</member><member name="M:DTIServerControls.DTIServerBase.getDesignTimeHtml">
	<summary>
 Gets the html for rendering at design time.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:DTIServerControls.DTIServerBase.DataReady">
	<summary>
 Raised when the internal parallel data helper prepares a the data
 </summary>
	<remarks></remarks>
</member><member name="E:DTIServerControls.DTIServerBase.typeFirstInitialized">
	<summary>
 Called once in an application context when this type is first initialized. Used for data setup etc.
 </summary>
	<param name="t"></param>
	<remarks></remarks>
</member><member name="E:DTIServerControls.DTIServerBase.typeInitThisRequest">
	<summary>
 Called once per type per request. Usefull if many controls are on a page but a page event only needs to occure once.
 </summary>
	<param name="t"></param>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTIServerBase.Component_Type">
	<summary>
 Component type name used to group sql commands into a que.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTIServerBase.Session">
	<summary>
 The session object that supports design time access.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTIServerBase.DataSource">
	<summary>
 The optional data object 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTIServerBase.UniquePerPage">
	<summary>
 If set true, the page name is automatically appended to the contentType.
 This allows you to add serverControls to a master page and have them associate with different data for each page.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DTIServerControls.DTIServerBase.contentType">
	<summary>
 The string identifier for a control instance. 
 This allong with the mainId forms a unique identifier for the object for the entire application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:DTIServerControls.DTIServerBase">
	<summary>
 Base class for datacentric controls. Adds data accessors and design-time support.
 </summary>
	<remarks></remarks>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlDataTable">
	<summary>
Represents the strongly named DataTable class.
</summary>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlPropertyDataTable">
	<summary>
Represents the strongly named DataTable class.
</summary>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlRow">
	<summary>
Represents strongly named DataRow class.
</summary>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlPropertyRow">
	<summary>
Represents strongly named DataRow class.
</summary>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlRowChangeEvent">
	<summary>
Row event argument class
</summary>
</member><member name="T:DTIServerControls.dsDTIControls.DTIControlPropertyRowChangeEvent">
	<summary>
Row event argument class
</summary>
</member><member name="T:DTIServerControls.dsDTIControls">
	<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member><member name="T:DTIServerControls.DTIServerBaseDesigner">
	<summary>
 Design time support class. 
 </summary>
	<remarks></remarks>
</member><member name="M:DTIServerControls.PropertyCreator.GetType(System.Type,System.String)">
	<summary> 
 Gets the Type of the given property of the given targetType. 
 The targetType and propertyName parameters can't be null. 
 </summary>
	<param name="targetType">the target type which contains the property</param>
	<param name="propertyName">the property to get, can be a property on a nested object (eg. "Child.Name")</param>
</member><member name="M:DTIServerControls.PropertyCreator.GetValue(System.Object,System.String)">
	<summary> 
 Gets the value of the given property of the given target. 
 If objects within the property hierarchy are null references, null will be returned. 
 The target and propertyName parameters can't be null. 
 </summary>
	<param name="target">the target object to get the value from</param>
	<param name="propertyName">the property to get, can be a property on a nested object (eg. "Child.Name")</param>
</member><member name="M:DTIServerControls.PropertyCreator.SetValue(System.Object,System.String,System.Object)">
	<summary> 
 Sets the value of the given property on the given target to the given value. 
 If objects within the property hierarchy are null references, an attempt will be 
 made to construct a new instance through a parameterless constructor. 
 The target and propertyName parameters can't be null. 
 </summary>
	<param name="target">the target object to set the value on</param>
	<param name="propertyName">the property to set, can be a property on a nested object (eg. "Child.Name")</param>
	<param name="value">the new value of the property</param>
</member><member name="M:DTIServerControls.PropertyCreator.GetPropertyNameString(System.String[],System.Int32)">
	<summary> 
 Returns a string containing the properties in the propertyList up to the given 
 level, separated by dots. 
 For the propertyList { "Zero", "One", "Two" } and level 1, the string 
 "Zero.One" will be returned. 
 </summary>
	<param name="propertyList">the array containing the properties in the corect order</param>
	<param name="level">the level up to wich to include the properties in the returned string</param>
	<returns>a dot-separated string containing the properties up to the given level</returns>
</member><member name="M:DTIServerControls.PropertyCreator.GetTypeImpl(System.Type,System.String)">
	<summary> 
 Returns the type of the given property on the target instance. 
 The type and propertyName parameters can't be null. 
 </summary>
	<param name="targetType">the type of the target instance</param>
	<param name="propertyName">the property to retrieve the type for</param>
	<returns>the typr of the given property on the target type</returns>
</member><member name="M:DTIServerControls.PropertyCreator.GetValueImpl(System.Object,System.String)">
	<summary> 
 Returns the value of the given property on the target instance. 
 The target instance and propertyName parameters can't be null. 
 </summary>
	<param name="target">the instance on which to get the value</param>
	<param name="propertyName">the property for which to get the value</param>
	<returns>the value of the given property on the target instance</returns>
</member><member name="M:DTIServerControls.PropertyCreator.SetValueImpl(System.Object,System.String,System.Object)">
	<summary> 
 Sets the given property of the target instance to the given value. 
 Type mismatches in the parameters of these methods will result in an exception. 
 Also, the target instance and propertyName parameters can't be null. 
 </summary>
	<param name="target">the instance to set the value on</param>
	<param name="propertyName">the property to set the value on</param>
	<param name="value">the value to set on the target</param>
</member><member name="M:DTIServerControls.PropertyCreator.GetPropertyInfo(System.Type,System.String)">
	<summary> 
 Obtains the PropertyInfo for the given propertyName of the given type from the cache. 
 If it is not already in the cache, the PropertyInfo will be looked up and added to 
 the cache. 
 </summary>
	<param name="type">the type to resolve the property on</param>
	<param name="propertyName">the name of the property to return the PropertyInfo for</param>
	<returns></returns>
</member><member name="M:DTIServerControls.PropertyCreator.GetBestMatchingProperty(System.String,System.Type)">
	<summary> 
 Gets the best matching property info for the given name on the given type if the same property is defined on 
 multiple levels in the object hierarchy. 
 </summary>
</member><member name="M:DTIServerControls.PropertyCreator.CalculateDistance(System.Type,System.Type)">
	<summary> 
 Calculates the hierarchy levels between two classes. 
 If the targetObjectType is the same as the baseType, the returned distance will be 0. 
 If the two types do not belong to the same hierarchy, -1 will be returned. 
 </summary>
</member><member name="M:DTIServerControls.PropertyCreator.GetPropertyInfoCache(System.Type)">
	<summary> 
 Returns the PropertyInfoCache for the given type. 
 If there isn't one available already, a new one will be created. 
 </summary>
	<param name="type">the type to retrieve the PropertyInfoCache for</param>
	<returns>the PropertyInfoCache for the given type</returns>
</member><member name="M:DTIServerControls.PropertyCreator.Construct(System.Type)">
	<summary> 
 Creates a new object of the given type, provided that the type has a default (parameterless) 
 constructor. If it does not have such a constructor, an exception will be thrown. 
 </summary>
	<param name="type">the type of the object to construct</param>
	<returns>a new instance of the given type</returns>
</member><member name="T:DTIServerControls.PropertyInfoCache">
	<summary> 
 Keeps a mapping between a string and a PropertyInfo instance. 
 Simply wraps an IDictionary and exposes the relevant operations. 
 Putting all this in a separate class makes the calling code more 
 readable. 
 </summary>
</member>
</members>
</doc>