/* jQuery Notify UI Widget 1.5 by Eric Hynds
* http://www.erichynds.com/jquery/a-jquery-ui-growl-ubuntu-notification-widget/
*
* Depends:
*   - jQuery 1.4+
*   - jQuery UI 1.8 widget factory
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*/
(function($) {

    $.widget("ech.notify", {

        options: {
            speed: 500,
            expires: 5000,
            stack: "below",
            custom: false,
            queue: false
        },

        _create: function() {
            var self = this;
            this.templates = {};
            this.keys = [];

            // build and save templates
            this.element.addClass("ui-notify").children().addClass("ui-notify-message ui-notify-message-style").each(function(i) {
                var key = this.id || i;
                self.keys.push(key);
                self.templates[key] = $(this).removeAttr("id").wrap("<div></div>").parent().html(); // because $(this).andSelf().html() no workie
            }).end().empty().show();
        },

        create: function(template, msg, opts) {
            if (typeof template === "object") {
                opts = msg;
                msg = template;
                template = null;
            }

            var tpl = this.templates[template || this.keys[0]];

            // remove default styling class if rolling w/ custom classes
            if (opts && opts.custom) {
                tpl = $(tpl).removeClass("ui-notify-message-style").wrap("<div></div>").parent().html();
            }

            this.openNotifications = this.openNotifications || 0;

            // return a new notification instance
            return new $.ech.notify.instance(this)._create(msg, $.extend({}, this.options, opts), tpl);
        }
    });

    // instance constructor
    $.extend($.ech.notify, {
        instance: function(widget) {
            this.__super = widget;
            this.isOpen = false;
        }
    });

    // instance methods
    $.extend($.ech.notify.instance.prototype, {

        _create: function(params, options, template) {
            this.options = options;

            var self = this,

            // build html template
      html = template.replace(/#(?:\{|%7B)(.*?)(?:\}|%7D)/g, function($1, $2) {
          return ($2 in params) ? params[$2] : '';
      }),

            // the actual message
      m = (this.element = $(html)),

            // close link
      closelink = m.find(".ui-notify-close");

            // clickable?
            if (typeof this.options.click === "function") {
                m.addClass("ui-notify-click").bind("click", function(e) {
                    self._trigger("click", e, self);
                });
            }

            // show close link?
            if (closelink.length) {
                closelink.bind("click", function() {
                    self.close();
                    return false;
                });
            }

            this.__super.element.queue("notify", function() {
                self.open();

                // auto expire?
                if (typeof options.expires === "number" && options.expires > 0) {
                    setTimeout($.proxy(self.close, self), options.expires);
                }
            });

            if (!this.options.queue || this.__super.openNotifications <= this.options.queue - 1) {
                this.__super.element.dequeue("notify");
            }

            return this;
        },

        close: function() {
            var speed = this.options.speed;

            this.element.fadeTo(speed, 0).slideUp(speed, $.proxy(function() {
                this._trigger("close");
                this.isOpen = false;
                this.element.remove();
                this.__super.openNotifications -= 1;
                this.__super.element.dequeue("notify");
            }, this));

            return this;
        },

        open: function() {
            if (this.isOpen || this._trigger("beforeopen") === false) {
                return this;
            }

            var self = this;

            this.__super.openNotifications += 1;

            this.element[this.options.stack === "above" ? "prependTo" : "appendTo"](this.__super.element).css({ display: "none", opacity: "" }).fadeIn(this.options.speed, function() {
                self._trigger("open");
                self.isOpen = true;
            });

            return this;
        },

        widget: function() {
            return this.element;
        },

        _trigger: function(type, e, instance) {
            return this.__super._trigger.call(this, type, e, instance);
        }
    });

})(jQuery);


function appendNotifyContainer(id,style) {
    if ($("#default-notifytemplate").length == 0) {
        $($("form")[0]).append("<div id='" + id + "' style='" + style + "display:none;'> \
        <div id='default-notifytemplate' class='ui-notify-default'> \
        	<a class='ui-notify-cross ui-notify-close' href='#'>x</a> \
        	<h1>#{title}</h1><p>#{text}</p> \
        </div> \
        <div id='error-notifytemplate' class='ui-state-error'> \
              <a class='ui-notify-close' href='#'><span class='ui-icon ui-icon-close' style='float:right'></span></a> \
              <span style='float:left; margin-right: 2px;' class='ui-icon ui-icon-alert'></span> \
              <h1>#{title}</h1> \
              <p>#{text}</p> \
        </div> \
        <div id='info-notifytemplate' class='ui-state-highlight'> \
              <a class='ui-notify-close' href='#'><span class='ui-icon ui-icon-close' style='float:right'></span></a> \
              <span style='float:left; margin-right: 2px;' class='ui-icon ui-icon-info'></span> \
              <h1>#{title}</h1> \
              <p>#{text}</p> \
        </div></div>");
        $("#" + id).notify();
    }
}


function getImage(src) {
    var myRegexp = /src\=[\"\'](.*)[\"\']/g;
    var match = myRegexp.exec(src);
    if (match && match.length > 0)
        return match[1];
    return "";
}

function chromeNotification(title, content, icon, oncloseFunction) {
    if (icon == null) icon = "";
    if (icon == "") icon = getImage(title);
    if (icon == "") icon = getImage(content);

    content = content.replace(/(<([^>]+)>)/ig, "");
    title = title.replace(/(<([^>]+)>)/ig, "");
    var myNotification = new Notify(title, {
                body: content,
                icon: icon,
                notifyClose: oncloseFunction,
                notifyClick: oncloseFunction,
                timeout: 30
            });

            myNotification.show();
    /*
    if (window.webkitNotifications) {
        if (window.webkitNotifications.checkPermission() == 0) { // 0 is PERMISSION_ALLOWED
            var notify = window.webkitNotifications.createNotification(icon, title, content);
            if (oncloseFunction != null) notify.onclose = oncloseFunction;
            notify.show();
            return notify;
        } else {
            window.webkitNotifications.requestPermission();
        }
    }
    */
}

function requestNotifyPermissions() {
    Notify.requestPermission();
}

function chromeHTMLNotification(url) {
    if (window.webkitNotifications) {
        if (window.webkitNotifications.checkPermission() == 0) { // 0 is PERMISSION_ALLOWED
            return window.webkitNotifications.createHTMLNotification(url).show();
        } else {
            window.webkitNotifications.requestPermission();
        }
    }
}





















(function (root, factory) {

    'use strict';

    if (typeof define === 'function' && define.amd) {
        // AMD environment
        define('notify', [], function () {
            return factory(root, document);
        });
    } else if (typeof exports === 'object') {
        // CommonJS environment
        module.exports = factory(root, document);
    } else {
        // Browser environment
        root.Notify = factory(root, document);
    }

} (window, function (w, d) {

    'use strict';

    function Notify(title, options) {

        if (typeof title !== 'string') {
            throw new Error('Notify(): first arg (title) must be a string.');
        }

        this.title = title;

        this.options = {
            icon: '',
            body: '',
            tag: '',
            notifyShow: null,
            notifyClose: null,
            notifyClick: null,
            notifyError: null,
            permissionGranted: null,
            permissionDenied: null,
            timeout: null
        };

        this.permission = null;

        if (!Notify.isSupported()) {
            return;
        }

        //User defined options for notification content
        if (typeof options === 'object') {

            for (var i in options) {
                if (options.hasOwnProperty(i)) {
                    this.options[i] = options[i];
                }
            }

            //callback when notification is displayed
            if (typeof this.options.notifyShow === 'function') {
                this.onShowCallback = this.options.notifyShow;
            }

            //callback when notification is closed
            if (typeof this.options.notifyClose === 'function') {
                this.onCloseCallback = this.options.notifyClose;
            }

            //callback when notification is clicked
            if (typeof this.options.notifyClick === 'function') {
                this.onClickCallback = this.options.notifyClick;
            }

            //callback when notification throws error
            if (typeof this.options.notifyError === 'function') {
                this.onErrorCallback = this.options.notifyError;
            }
        }
    }

    // return true if the browser supports HTML5 Notification
    Notify.isSupported = function () {
        if ('Notification' in w) {
            return true;
        }
        return false;
    };

    // returns true if the permission is not granted
    Notify.needsPermission = function () {
        if (Notify.isSupported() && Notification.permission === 'granted') {
            return false;
        }
        return true;
    };

    // asks the user for permission to display notifications.  Then calls the callback functions is supplied.
    Notify.requestPermission = function (onPermissionGrantedCallback, onPermissionDeniedCallback) {
        if (Notify.isSupported()) {
            w.Notification.requestPermission(function (perm) {
                switch (perm) {
                    case 'granted':
                        if (typeof onPermissionGrantedCallback === 'function') {
                            onPermissionGrantedCallback();
                        }
                        break;
                    case 'denied':
                        if (typeof onPermissionDeniedCallback === 'function') {
                            onPermissionDeniedCallback();
                        }
                        break;
                }
            });
        }
    };


    Notify.prototype.show = function () {
        var that = this;

        if (!Notify.isSupported()) {
            return;
        }

        this.myNotify = new Notification(this.title, {
            'body': this.options.body,
            'tag': this.options.tag,
            'icon': this.options.icon
        });

        if (this.options.timeout && !isNaN(this.options.timeout)) {
            setTimeout(this.close.bind(this), this.options.timeout * 1000);
        }

        this.myNotify.addEventListener('show', this, false);
        this.myNotify.addEventListener('error', this, false);
        this.myNotify.addEventListener('close', this, false);
        this.myNotify.addEventListener('click', this, false);
    };

    Notify.prototype.onShowNotification = function (e) {
        if (this.onShowCallback) {
            this.onShowCallback(e);
        }
    };

    Notify.prototype.onCloseNotification = function () {
        if (this.onCloseCallback) {
            this.onCloseCallback();
        }
        this.destroy();
    };

    Notify.prototype.onClickNotification = function () {
        if (this.onClickCallback) {
            this.onClickCallback();
        }
    };

    Notify.prototype.onErrorNotification = function () {
        if (this.onErrorCallback) {
            this.onErrorCallback();
        }
        this.destroy();
    };

    Notify.prototype.destroy = function () {
        this.myNotify.removeEventListener('show', this, false);
        this.myNotify.removeEventListener('error', this, false);
        this.myNotify.removeEventListener('close', this, false);
        this.myNotify.removeEventListener('click', this, false);
    };

    Notify.prototype.close = function () {
        this.myNotify.close();
    };

    Notify.prototype.handleEvent = function (e) {
        switch (e.type) {
            case 'show':
                this.onShowNotification(e);
                break;
            case 'close':
                this.onCloseNotification(e);
                break;
            case 'click':
                this.onClickNotification(e);
                break;
            case 'error':
                this.onErrorNotification(e);
                break;
        }
    };

    return Notify;

}));

