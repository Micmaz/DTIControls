<?xml version="1.0"?>
<doc>
<assembly>
<name>
BaseClasses
</name>
</assembly>
<members>
<member name="M:BaseClasses.SQLHelper.createAdaptor(System.String,System.Data.Common.DbConnection)">
	<summary>
 Creates a DbDataAdapter from a command string.
 </summary>
	<param name="SQLcommand">Select command used to generate the DbDataAdapter</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns>a DbCommand typed to the base helper type.</returns>
	<remarks>The default connection uses web config connection string named 'DTIConnection' or 'ConnectionString'</remarks>
</member><member name="M:BaseClasses.SQLHelper.createCommand(System.String,System.Data.Common.DbConnection)">
	<summary>
 Creates a DbCommand from a command string.
 </summary>
	<param name="SQLcommand">Select command used to generate the DbCommand</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns>a DbCommand typed to the base helper type.</returns>
	<remarks>The default connection uses web config connection string named 'DTIConnection' or 'ConnectionString'</remarks>
</member><member name="M:BaseClasses.SQLHelper.createCommandBuilder(System.Data.Common.DbDataAdapter@)">
	<summary>
 Creates a typed DbCommandBuilder
 </summary>
	<param name="adaptor">The typed DbDataAdapter </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.createConnection(System.String@)">
	<summary>
 Creates a typed connection from a string.
 </summary>
	<param name="ConnectionString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.createParameter(System.String,System.Object)">
	<summary>
 Creates a typed dbParameter from a name and value
 </summary>
	<param name="name">the parm name.</param>
	<param name="value">the parm value.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.createParameter(System.Data.Common.DbParameter@)">
	<summary>
 Creates a typed parameter from a genric DbParameter
 </summary>
	<param name="parameter">the DbParameter</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.ProcessDataAdaptor(System.Data.Common.DbDataAdapter@,System.String,System.Data.DataTable)">
	<summary>
 Called on creation of a new DbAdaptor
 </summary>
	<param name="da"></param>
	<param name="TableName"></param>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.checkDBObjectExists(System.String)">
	<summary>
 Checks if a datatable exists in a database.
 </summary>
	<param name="tablename">The name of the table that may eexist in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.getCreateTableString(System.Data.DataTable)">
	<summary>
 Builds a create script for a table in the database based on the schema of the datatable passed in.
 </summary>
	<param name="dt">The datatable that is usedto build the create String. Only schema is used, data is ignored.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.SQLHelper.processSelectCommand(System.String)">
	<summary>
 Normalize sql statements in case non-compliant syntax works it's way in.
 </summary>
	<param name="commandString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderRemoveLiterals(System.Web.UI.Page)">
	<summary>
 Searches a Page and removes all literal controls it finds.
 </summary>
	<param name="pg"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderRemoveLiterals(System.Web.UI.Control)">
	<summary>
 Searches a Control and removes all literal controls it finds.
 </summary>
	<param name="_ctrl"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderStrictControlSetPresence(System.Web.UI.Control,System.Type[],System.Boolean)">
	<summary>
 Determines weather a control containes a type in it's control list. Does not return if the contained type is a subclass of the type argument
 </summary>
	<param name="_ctrl"></param>
	<param name="_types"></param>
	<param name="ignoreLiterals"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderPageforType(System.Web.UI.Page,System.Type)">
	<summary>
 Spiders a page for the first instance of a type and returns the first instance if found. Otherwise it returns nothing.
 </summary>
	<param name="pg">The page to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<returns>a control of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderPageforTypeArray(System.Web.UI.Page,System.Type,System.Boolean)">
	<summary>
  Spiders a page for the first instance of a type and returns all instances if found. Otherwise it returns an empty collection.
 </summary>
	<param name="pg">The page to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<param name="includeSubclasses">Determines weather to add subclasses of a the type to the return list.</param>
	<returns>A Collection of objects of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spidercontrolforTypeArray(System.Web.UI.Control,System.Type,Microsoft.VisualBasic.Collection@,System.Boolean,System.Boolean)">
	<summary>
  Spiders a Control for the all instances of a type and returns all instances if found. Otherwise it returns an empty collection.
 </summary>
	<param name="topctrl">The Control to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<param name="includeSubclasses">Determines weather to add subclasses of a the type to the return list.</param>
	<returns>A Collection of objects of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spidercontrolforTypeArray(System.Web.UI.Control,System.Type,System.Boolean,System.Boolean)">
	<summary>
  Spiders a Control for the all instances of a type and returns all instances if found. Otherwise it returns an empty collection.
 </summary>
	<param name="topctrl">The Control to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<param name="includeSubclasses">Determines weather to add subclasses of a the type to the return list.</param>
	<returns>A Collection of objects of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spidercontrolforType(System.Web.UI.Control,System.Type)">
	<summary>
 Spiders a Control for the first instance of a type and returns the first instance if found. Otherwise it returns nothing.
 </summary>
	<param name="ctrl">The Control to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<returns>a control of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderUpforType(System.Web.UI.Control,System.Type)">
	<summary>
 Searches from the control up until it reaches the page for a specific control. Returns the first istance of tp found going up or nothing if unfound.
 </summary>
	<param name="ctrl">The Control to search.</param>
	<param name="tp">The type that is being searched for.</param>
	<returns>a control of type tp</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spiderPageforAllOfType(System.Web.UI.Page,System.Type)">
	<summary>
 Spiders a Page for the all instances of a type and returns all instances if found. Otherwise it returns an empty control list.
 </summary>
	<param name="pg"></param>
	<param name="tp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Spider.spidercontrolforAllOfType(System.Web.UI.Control,System.Type)">
	<summary>
 Spiders a Control for the all instances of a type and returns all instances if found. Otherwise it returns an empty control list.
 </summary>
	<param name="ctrl"></param>
	<param name="tp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.Spider">
	<summary>
 Used to search a page or cotrol for contents. Spiders all sub controls in most cases.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.Scripts.filename">
	<summary>
 Filename read from query string. uses f=[resourceName]
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.Page_Load(System.Object,System.EventArgs)">
	<summary>
 The load event. If it makes it here the item is either uncached on the client or the app is in debug mode.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.writeStringResponce(System.String@)">
	<summary>
 Writes the string to the output stream.
 </summary>
	<param name="str"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.writeFileFromAssembly">
	<summary>
 Writes the file to the output stream.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.minimizeFile(System.IO.Stream@)">
	<summary>
 Minimizes a stream of javascript
 </summary>
	<param name="jsFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.ScriptsURL(System.Boolean)">
	<summary>
 Returns the url to the scripts.aspx page. (e.g. "~/res/BaseClasses/Scripts.aspx?f=baseclasses/TestResource.jpg")
 </summary>
	<param name="debug">optional set to true to prevent compression of js files</param>
	<returns>The string to prepend to urls to utilize the Scripts.aspx resource</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.GZipSupported">
	<summary>
 Determins weather resource should be gzipped on return. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.isModified">
	<summary>
 Determins weather requested item has been modified since it's last request. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.Page_Init(System.Object,System.EventArgs)">
	<summary>
 Handles the init event of the page. Will end the responce if the item is unmodified and therefore uses the client cache.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.Scripts.GenerateHash(System.String)">
	<summary>
 Generates a MD5 hash of a given input string
 </summary>
	<param name="input">String to hash</param>
	<returns>MD5 hash of String</returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.Scripts.etag">
	<summary>
 Gets an etag for client caching control based on the date a resource was last read from the hard disk.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.#ctor">
	<summary>
 Default constructor examins current request query string.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.ToString">
	<summary>
 Return the current query string.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.Add(System.String,System.String)">
	<summary>
 Add a key/value string pair to the query
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="P:BaseClasses.QueryStringChanger.FullUrl">
	<summary>
 Returns the full url with reformatted query.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.redirectToMyUrl(System.Boolean)">
	<summary>
 Redirects the responce to the formatted url/query
 </summary>
	<param name="endResponse"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.Remove(System.String)">
	<summary>
 removes a given key
 </summary>
	<param name="name"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.ReplaceQuery(System.String,System.String,System.Boolean)">
	<summary>
 replaces an existing query value and redirects the url immediatly.
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<param name="endResponse"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.QueryStringChanger.ReturnReplaceQuery(System.String,System.String)">
	<summary>
 replace a query value and returns the new full url.
 </summary>
	<param name="key"></param>
	<param name="value"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.QueryStringChanger">
	<summary>
 reads the query string, as well as setting it's values. Then forwards the responce to an apropriate query string url.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.Platform.isMono">
	<summary>
 Returns true if the application is running on the mono platform.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:BaseClasses.ParallelDataHelper.DataReady">
	<summary>
 All commands in sql que have been run and the data has been set to it's target object.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.ParallelDataHelper.addFillDataTable(System.String,System.Data.DataTable@,System.Object[]@,System.Data.Common.DbConnection@,System.Boolean)">
	<summary>
 adds a table select to the sql que that will be filled befor the dataready event.
 </summary>
	<param name="stmt"></param>
	<param name="dt"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<param name="createTableOnError"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ParallelDataHelper.addExecuteNonQuery(System.String,System.Object[]@,System.Data.Common.DbConnection@)">
	<summary>
 Adds a non-query to the sql que.
 </summary>
	<param name="stmt"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.ParallelDataHelper.addFetchSingleValue(System.String,System.Object[]@,System.Data.Common.DbConnection)">
	<summary>
 Adds a single value fetch to the sql que.
 </summary>
	<param name="stmt"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ParallelDataHelper.executeParallelDBCall">
	<summary>
 performs all sql calls in the current sql que.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.ParallelDataHelper">
	<summary>
 Data layer class used to execute multiple sql statements in once command. Usefull for component systems where many components execute a select independant of one another.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.ParallelCallStatementManager">
	<summary>
 Manages parallel data calls in a pages request/responce loop.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.ParallelCallStatement">
	<summary>
 A container class for an individual parallel sql call.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.PageTracker">
	<summary>
 Tracks where a user has been on a web application. Usefull for adding a breadcrumb or other navigation stack to an application.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.MimeDecoder.MimeType(System.String)">
	<summary>
 REturns the mime type for a file extension.
 </summary>
	<param name="strFileName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.MimeDecoder">
	<summary>
 Utility class to map a file extension to the apropriate mime type
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.errorHandler">
	<summary>
 Returns the current error handler for this application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:BaseClasses.MasterBase.PostBack">
	<summary>
 Fires when the load event occures with a postback
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.MasterBase.LoadNoPostBack">
	<summary>
 fires after the load event when there is no postback data
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.MasterBase.DataReady">
	<summary>
 Fires when data from a parallel data helper call has data available to it.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.BasePageInit_Init(System.Object,System.EventArgs)">
	<summary>
 Init event handeler. Sets the default connection.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.baseSecuityPage_Load(System.Object,System.EventArgs)">
	<summary>
 Load event handeler. Checks security and begins page tracking.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.Data">
	<summary>
 Returns a subclass of Database. The loacl assembly is searched, otherwise a cached version of Database is returned. Database is cached in the session so it will be user-isolated.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.sqlHelper">
	<summary>
 Convienece method, returns the BaseHelper in the dataObject. This is the default BaseHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.parallelDataHelper">
	<summary>
 Convienece method, returns the ParallelDataHelper in the dataObject. This is the default ParallelDataHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.defaultConnection">
	<summary>
 returns the default connection used in the web application. This is set in the web config as a connection string called either DTIConnection or ConnectionString.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.FillDataSet(System.String,System.String,System.Data.DataSet)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[])">BaseHelper.FillDataSet</see>
	</summary>
	<param name="command"></param>
	<param name="tableName"></param>
	<param name="ds"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.FillDataTable(System.String,System.Data.DataTable)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Object[])">BaseHelper.FillDataTable</see>
	</summary>
	<param name="command"></param>
	<param name="table"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.getValue(System.Object)">
	<summary>
 Returns the object or nothing if it is dbnull.value
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.getString(System.Object)">
	<summary>
 Returns the object or "" if it is null or dbnull.value 
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.SecurePage">
	<summary>
 If this is set to true then the page will not render past load unless the Username value has been set.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.UserName">
	<summary>
 The current users name. Must be set programatically.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.getUsername">
	<summary>
 Gets the username from Page.User.Identity.Name
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.checkSecurity">
	<summary>
 Returns true if UserName has been set to a non-empty string. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.MasterBase.securityFailedPage">
	<summary>
 This is the url of the page the request is forwarded to if the security check fails.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.isNull(System.Data.DataRow,System.String)">
	<summary>
 Returns true if a column is null or dbnull.value
 </summary>
	<param name="row"></param>
	<param name="colname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.JavaScriptEncode(System.String)">
	<summary>
  Performs JavaScript encoding on given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.JavaScriptUnencode(System.String)">
	<summary>
 Unencodes JavaScript characters from given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.ValidCookieName(System.String)">
	<summary>
 Ensures a string is compliant with cookie name requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.getQueryString(System.String[])">
	<summary>
 Returns the query string and excludes some of the parameters if needed.
 </summary>
	<param name="excludeKeys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.GetUrlPath">
	<summary>
 Returns the full path of the current url. ex: /test/some/location.aspx
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.ValidCookieValue(System.String)">
	<summary>
 Ensures a string is compliant with cookie value requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.makeTableFromCSV(System.Web.HttpPostedFile)">
	<summary>
 Creates a datatable from a csv file posted to a web form.
 </summary>
	<param name="myFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.writeCSV(System.Data.DataTable,System.String[],System.Boolean)">
	<summary>
 Converts a datatable to csv format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.MasterBase.writeexcel(System.Data.DataTable,System.String[],System.Boolean)">
	<summary>
 Converts a datatable to excel format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="T:BaseClasses.MasterBase">
	<summary>
 Base class for System.Web.UI.MasterPage class, adding data accessors, error handeling and basic security. 
 </summary>
	<remarks></remarks>
</member><member name="F:BaseClasses.ListResources.form1">
	<summary>
form1 control.
</summary>
	<remarks>
Auto-generated field.
To modify move field declaration from designer file to code-behind file.
</remarks>
</member><member name="F:BaseClasses.ListResources.Table1">
	<summary>
Table1 control.
</summary>
	<remarks>
Auto-generated field.
To modify move field declaration from designer file to code-behind file.
</remarks>
</member><member name="T:BaseClasses.JsMinimizer">
	<summary>
 Compresses javascript files for faster client download.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.Hashing.HashTypes">
	<summary>
 Hashing algorithms supported by .Net
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.Hashing.GetHash(System.String,BaseClasses.Hashing.HashTypes)">
	<summary>
 Create hash based on the supplied hashing algorithm
 </summary>
	<param name="input">String to hash</param>
	<param name="hashType">Hashing algorithim to hash input</param>
	<returns>Hashed string based on supplied hashing algorithm</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Hashing.CheckHash(System.String,System.String,BaseClasses.Hashing.HashTypes)">
	<summary>
 Checks if string equals hash based on the supplied hashing algorithm
 using the SlowEquals function.
 </summary>
	<param name="original"></param>
	<param name="hashString"></param>
	<param name="hashType"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Hashing.GenerateSalt(System.Int32)">
	<summary>
 Creates random string for salting passwords.
 </summary>
	<param name="Size">Size of string in bytes</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Hashing.SecureHash(System.String,System.String@,System.Int32,System.Int32)">
	<summary>
 Hashes string using Password Based Key Derivation Function 2 (PBKDF2), generating a new salt.
 Use CheckPBKDF2Hash to validate.
 </summary>
	<param name="value">String to hash</param>
	<param name="salt">String to contain the unique salt to regenerate hash</param>
	<param name="Iterations">Number of Iterations to produce derived key</param>
	<param name="SaltSize">Number of bytes in Salt</param>
	<returns>PBKDF2-SHA1 hash of a value and a unique salt</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.Hashing.PBKDF2(System.String,System.String,System.Int32,System.Int32)">
	<summary>
 Computes the PBKDF2-SHA1 hash of a password.
 </summary>
	<param name="password">The password to hash.</param>
	<param name="salt">The salt.</param>
	<param name="iterations">The PBKDF2 iteration count.</param>
	<param name="outputBytes">The length of the hash to generate, in bytes.</param>
	<returns>A hash of the password.</returns>
</member><member name="M:BaseClasses.Hashing.CheckPBKDF2Hash(System.String,System.String,System.String)">
	<summary>
 Validates a password given a hash of the correct one.
 </summary>
	<param name="password">The hash to check.</param>
	<param name="salt">The salt to use.</param>
	<param name="hash">A hash of the correct password.</param>
	<returns>True if the password is correct. False otherwise.</returns>
</member><member name="M:BaseClasses.Hashing.SlowEquals(System.Byte[],System.Byte[])">
	<summary>
 Compares two byte arrays in length-constant time. This comparison
 method is used so that password hashes cannot be extracted from 
 on-line systems using a timing attack and then attacked off-line.
 </summary>
	<param name="a">The first byte array.</param>
	<param name="b">The second byte array.</param>
	<returns>True if both byte arrays are equal. False otherwise.</returns>
</member><member name="M:BaseClasses.Hashing.SlowEquals(System.String,System.String)">
	<summary>
 Compares two strings in length-constant time. This comparison
 method is used so that password hashes cannot be extracted from 
 on-line systems using a timing attack and then attacked off-line.
 </summary>
	<param name="a">The first string.</param>
	<param name="b">The second string.</param>
	<returns>True if both strings are equal. False otherwise.</returns>
</member><member name="M:BaseClasses.ErrorHandlerBase.StackFrameToString(System.Diagnostics.StackFrame)">
	<summary>
 turns a single stack frame object into an informative string
 </summary>
	<param name="sf"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.EnhancedStackTrace(System.Diagnostics.StackTrace,System.String)">
	<summary>
 enhanced stack trace generator
 </summary>
	<param name="st"></param>
	<param name="strSkipClassName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.EnhancedStackTrace(System.Exception)">
	<summary>
 enhanced stack trace generator, using existing exception as start point
 </summary>
	<param name="ex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.EnhancedStackTrace">
	<summary>
 enhanced stack trace generator, using current execution as start point
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.AllAssemblyDetailsToString">
	<summary>
 returns brief summary info for all assemblies in the current AppDomain
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.AssemblyDetailsToString(System.Reflection.Assembly)">
	<summary>
 returns more detailed information for a single assembly
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AssemblyInfoToString(System.Exception)">
	<summary>
 retrieve relevant assembly details for this exception, if possible
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.CurrentWindowsIdentity">
	<summary>
 exception-safe WindowsIdentity.GetCurrent retrieval; returns "domain\username"
 </summary>
	<remarks>
 per MS, this can sometimes randomly fail with "Access Denied" on NT4
 </remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.CurrentEnvironmentIdentity">
	<summary>
 exception-safe System.Environment "domain\username" retrieval
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.ProcessIdentity">
	<summary>
 retrieve Process identity with fallback on error to safer method
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.SysInfoToString(System.Boolean)">
	<summary>
 gather some system information that is helpful in diagnosing exceptions
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.ExceptionToString(System.Exception)">
	<summary>
 translate an exception object to a formatted string, with additional system info
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.ExceptionToStringPrivate(System.Exception,System.Boolean)">
	<summary>
 private version, called recursively for nested exceptions (inner, outer, etc)
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AssemblyLastWriteTime(System.Reflection.Assembly)">
	<summary>
 exception-safe file attrib retrieval; we don't care if this fails
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AssemblyBuildDate(System.Reflection.Assembly,System.Boolean)">
	<summary>
 returns build datetime of assembly, using calculated build time if possible, or filesystem time if not
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AssemblyAttribs(System.Reflection.Assembly)">
	<summary>
 returns string name / string value pair of all attribs for the specified assembly
 </summary>
	<remarks>
 note that Assembly* values are pulled from AssemblyInfo file in project folder

 Trademark       = AssemblyTrademark string
 Debuggable      = True
 GUID            = 7FDF68D5-8C6F-44C9-B391-117B5AFB5467
 CLSCompliant    = True
 Product         = AssemblyProduct string
 Copyright       = AssemblyCopyright string
 Company         = AssemblyCompany string
 Description     = AssemblyDescription string
 Title           = AssemblyTitle string
 </remarks>
</member><member name="M:BaseClasses.ErrorHandlerBase.GetAssemblyFromName(System.String)">
	<summary>
 matches assembly by Assembly.GetName.Name; returns nothing if no match
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.GetASPSettings">
	<summary>
 returns formatted string of all ASP.NET collections (QueryString, Form, Cookies, ServerVariables)
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.HttpVarsToString(System.Web.HttpCookieCollection)">
	<summary>
 returns formatted string of all ASP.NET Cookies
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.HttpVarsToString(System.Web.HttpApplicationState)">
	<summary>
 returns formatted summary string of all ASP.NET app vars
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.HttpVarsToString(System.Web.Caching.Cache)">
	<summary>
 returns formatted summary string of all ASP.NET Cache vars
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.HttpVarsToString(System.Web.SessionState.HttpSessionState)">
	<summary>
 returns formatted summary string of all ASP.NET Session vars
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.HttpVarsToString(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean,System.String)">
	<summary>
 returns formatted string of an arbitrary ASP.NET NameValueCollection
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AppendLine(System.Text.StringBuilder,System.String,System.Object)">
	<summary>
 attempts to coerce the value object using the .ToString method if possible, 
 then appends a formatted key/value string pair to a StringBuilder. 
 will display the type name if the object cannot be coerced.
 </summary>
</member><member name="M:BaseClasses.ErrorHandlerBase.AppendLine(System.Text.StringBuilder,System.String,System.String)">
	<summary>
 appends a formatted key/value string pair to a StringBuilder
 </summary>
</member><member name="T:BaseClasses.ErrorHandlerBase">
	<summary>
 Generic error handler class. Can be overridden to handel errors from all classes derived from a baseclass type.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.EncryptionHelper.Encrypt(System.String,System.String)">
	<summary>
 The function used to encrypt the text from a string key.
 </summary>
	<param name="strText"></param>
	<param name="strEncrKey"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.EncryptionHelper.Decrypt(System.String,System.String)">
	<summary>
 The function used to decrypt the text from a string key.
 </summary>
	<param name="strText"></param>
	<param name="sDecrKey"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.EncryptionHelper">
	<summary>
 A helper class to simplify string encryption calls
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.dsBaseClasses.DTIPageTrackerDataTable">
	<summary>
Represents the strongly named DataTable class.
</summary>
</member><member name="T:BaseClasses.dsBaseClasses.DTIPageTrackerRow">
	<summary>
Represents strongly named DataRow class.
</summary>
</member><member name="T:BaseClasses.dsBaseClasses.DTIPageTrackerRowChangeEvent">
	<summary>
Row event argument class
</summary>
</member><member name="F:BaseClasses.BaseVirtualPathProvider.rebuildWait">
	<summary>
 The shortest time in seconds between two assembly fetches. Prevents too-frequent resource retrieval.
 </summary>
	<remarks></remarks>
</member><member name="F:BaseClasses.BaseVirtualPathProvider.lastrebuild">
	<summary>
 The date the assemblies were last fetched from disk to memory.
 </summary>
	<remarks></remarks>
</member><member name="F:BaseClasses.BaseVirtualPathProvider.resources">
	<summary>
 a shared hash of the embedded resources and their common name.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseVirtualPathProvider.assemblies">
	<summary>
 Cached assemblies in the BaseVirtualPathProvider. Is kept in memory for the lifetime of the application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:BaseClasses.BaseVirtualPathProvider._assemblyClassHash">
	<summary>
 a hashtable linking to the resources in the assemblies list. Links a cached assembly with it's name as a string.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.initialized">
	<summary>
 Returns weather the baseVirtualPathProvider has been initialized or not. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.registerVirtualPathProvider">
	<summary>
 Registers the virtual path provider in the application. Ideally this call is added to the global.asax file on application start.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.buildLocalResources(System.String)">
	<summary>
 Spiders available dlls and caches all embedded resources for fast retrieval by a webserver. 
 </summary>
	<param name="assemblyname"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.cacheAssembly(System.Reflection.Assembly)">
	<summary>
 Adds assembly to the cache.
 </summary>
	<param name="asm"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.ClearResources">
	<summary>
 Clears the current cache of all assemblies. Assemblies will be recached on next access.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.getResourceStream(System.String)">
	<summary>
 Gets the file stream of an embedded resource.
 </summary>
	<param name="virtualPath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.getResourcesName(System.String,System.Boolean)">
	<summary>
	</summary>
	<param name="virtualPath"></param>
	<param name="retryOnFail"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.rebuildresources">
	<summary>
 Clears the current resource and assembly caches and refetches all assemblies from disk.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.FileExists(System.String)">
	<summary>
 Overridden function to indicate if a file has been found by a web request.
 </summary>
	<param name="virtualPath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.GetFile(System.String)">
	<summary>
 Overridden function to return the contents of a web request.
 </summary>
	<param name="virtualPath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
	<summary>
 Returnss the cachability of a given resource.
 </summary>
	<param name="virtualPath"></param>
	<param name="virtualPathDependencies"></param>
	<param name="utcStart"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseVirtualPathProvider">
	<summary>
 Allows embedded resources to be loaded as direct web calls. Format is http://localhost/res/[AssemblyName]/[Embedded_Resource]
 a web.config change is needed for files not normally handeled by .NET. By default *.aspx  and *.ascx files are handeled automatically. 
 </summary>
	<remarks></remarks>
</member><member name="E:BaseClasses.DataBase.defaultConnectionChanged">
	<summary>
 Raised when the default connection is changed.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.session">
	<summary>
 The http session.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.request">
	<summary>
 The http request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.response">
	<summary>
 The http request.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.SharedSession">
	<summary>
 The http session, either created or cached in a shared space.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.DataBase.createSession">
	<summary>
 A helper method to create a dummy session for winforms applications and design-time use.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.httpSession">
	<summary>
 The http session.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.DataBase.username">
	<summary>
 The current user 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.DataBase">
	<summary>
 Data accessor object. This class is subclassed and used to store data access and application-wide functions. 
 It is cached in the session and exists on a per-session bassis.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseWebService.Data">
	<summary>
 Returns a subclass of Database. The loacl assembly is searched, otherwise a cached version of Database is returned. Database is cached in the session so it will be user-isolated.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseWebService.sqlHelper">
	<summary>
 Convienece method, returns the BaseHelper in the dataObject. This is the default BaseHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseWebService.defaultConnection">
	<summary>
 returns the default connection used in the web application. This is set in the web config as a connection string called either DTIConnection or ConnectionString.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseWebService.FillDataSet(System.String,System.String,System.Data.DataSet)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[])">BaseHelper.FillDataSet</see>
	</summary>
	<param name="command"></param>
	<param name="tableName"></param>
	<param name="ds"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseWebService.FillDataTable(System.String,System.Data.DataTable)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Object[])">BaseHelper.FillDataTable</see>
	</summary>
	<param name="command"></param>
	<param name="table"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseWebService.getValue(System.Object)">
	<summary>
 Returns the object or nothing if it is dbnull.value
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseWebService.getString(System.Object)">
	<summary>
 Returns the object or "" if it is null or dbnull.value 
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseWebService.errorHandler">
	<summary>
 Returns the current error handler for this application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseWebService">
	<summary>
 Base class for System.Web.Services.WebService class, adding data accessors and error handeling.
 </summary>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityUserControl.PostBack">
	<summary>
 Fires when the load event occures with a postback
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityUserControl.LoadNoPostBack">
	<summary>
 fires after the load event when there is no postback data
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityUserControl.DataReady">
	<summary>
 Fires when data from a parallel data helper call has data available to it.
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.BasePageInit_Init(System.Object,System.EventArgs)">
	<summary>
 Init event handeler. Sets the default connection.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityUserControl.errorHandler">
	<summary>
 Returns the current error handler for this application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityUserControl.Data">
	<summary>
 Returns a subclass of Database. The loacl assembly is searched, otherwise a cached version of Database is returned. Database is cached in the session so it will be user-isolated.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityUserControl.sqlHelper">
	<summary>
 Convienece method, returns the BaseHelper in the dataObject. This is the default BaseHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityUserControl.parallelDataHelper">
	<summary>
 Convienece method, returns the ParallelDataHelper in the dataObject. This is the default ParallelDataHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityUserControl.defaultConnection">
	<summary>
 returns the default connection used in the web application. This is set in the web config as a connection string called either DTIConnection or ConnectionString.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.FillDataSet(System.String,System.String,System.Data.DataSet)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[])">BaseHelper.FillDataSet</see>
	</summary>
	<param name="command"></param>
	<param name="tableName"></param>
	<param name="ds"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.FillDataTable(System.String,System.Data.DataTable)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Object[])">BaseHelper.FillDataTable</see>
	</summary>
	<param name="command"></param>
	<param name="table"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.getValue(System.Object)">
	<summary>
 Returns the object or nothing if it is dbnull.value
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.getString(System.Object)">
	<summary>
 Returns the object or "" if it is null or dbnull.value 
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.isNull(System.Data.DataRow,System.String)">
	<summary>
 Returns true if a column is null or dbnull.value
 </summary>
	<param name="row"></param>
	<param name="colname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.JavaScriptEncode(System.String)">
	<summary>
  Performs JavaScript encoding on given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.JavaScriptUnencode(System.String)">
	<summary>
 Unencodes JavaScript characters from given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.ValidCookieName(System.String)">
	<summary>
 Ensures a string is compliant with cookie name requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.getQueryString(System.String[])">
	<summary>
 Returns the query string and excludes some of the parameters if needed.
 </summary>
	<param name="excludeKeys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.GetUrlPath">
	<summary>
 Returns the full path of the current url. ex: /test/some/location.aspx
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.ValidCookieValue(System.String)">
	<summary>
 Ensures a string is compliant with cookie value requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.makeTableFromCSV(System.Web.HttpPostedFile)">
	<summary>
 Creates a datatable from a csv file posted to a web form.
 </summary>
	<param name="myFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.writeCSV(System.Data.DataTable,System.String[],System.Boolean)">
	<summary>
 Converts a datatable to csv format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityUserControl.writeexcel(System.Data.DataTable,System.String[],System.Boolean)">
	<summary>
 Converts a datatable to excel format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseSecurityUserControl">
	<summary>
 Base class for System.Web.UI.UserControl class, adding data accessors, error handeling and basic security. 
 </summary>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityPage.pageTracked">
	<summary>
 Fires when page tracking is enabled and a new page is visited
 </summary>
	<param name="trackerRow"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityPage.PostBack">
	<summary>
 Fires when the load event occures with a postback
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityPage.LoadNoPostBack">
	<summary>
 fires after the load event when there is no postback data
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="E:BaseClasses.BaseSecurityPage.DataReady">
	<summary>
 Fires when data from a parallel data helper call has data available to it.
 </summary>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.errorHandler">
	<summary>
 Returns the current error handler for this application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.BasePageInit_Init(System.Object,System.EventArgs)">
	<summary>
 Init event handeler. Sets the default connection.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.Page_PreLoad(System.Object,System.EventArgs)">
	<summary>
 Preload event handeler. Calls the parallel datahelper so data will be available at load.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.baseSecuityPage_Load(System.Object,System.EventArgs)">
	<summary>
 Load event handeler. Checks security and begins page tracking.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.Page_PreRender(System.Object,System.EventArgs)">
	<summary>
 Prerenter event handeler. evecutes the parallel data helper so prerender and render should have all data availalbe.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.Data">
	<summary>
 Returns a subclass of Database. The loacl assembly is searched, otherwise a cached version of Database is returned. Database is cached in the session so it will be user-isolated.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.sqlHelper">
	<summary>
 Convienece method, returns the BaseHelper in the dataObject. This is the default BaseHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.parallelDataHelper">
	<summary>
 Convienece method, returns the ParallelDataHelper in the dataObject. This is the default ParallelDataHelper for a web application.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.defaultConnection">
	<summary>
 returns the default connection used in the web application. This is set in the web config as a connection string called either DTIConnection or ConnectionString.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.FillDataSet(System.String,System.String,System.Data.DataSet)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[])">BaseHelper.FillDataSet</see>
	</summary>
	<param name="command"></param>
	<param name="tableName"></param>
	<param name="ds"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.FillDataTable(System.String,System.Data.DataTable)">
	<summary>
 Convience method to <see cref="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Object[])">BaseHelper.FillDataTable</see>
	</summary>
	<param name="command"></param>
	<param name="table"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.getValue(System.Object)">
	<summary>
 Returns the object or nothing if it is dbnull.value
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.getString(System.Object)">
	<summary>
 Returns the object or "" if it is null or dbnull.value 
 </summary>
	<param name="o"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.SecurePage">
	<summary>
 If this is set to true then the page will not render past load unless the Username value has been set.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.AdminPage">
	<summary>
 If this is set to true then the page will not render past load unless the checkAdmin function returns true.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.UserName">
	<summary>
 The current users name. Must be set programatically.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.isAdmin">
	<summary>
 If the currentuser is an admin. Must be set programatically.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.getUsername">
	<summary>
 Gets the username from Page.User.Identity.Name
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.checkSecurity">
	<summary>
 Returns true if UserName has been set to a non-empty string. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.checkAdmin">
	<summary>
 Returns true if user is an Admin. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.securityFailedPage">
	<summary>
 This is the url of the page the request is forwarded to if the security check fails.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.AdminFailedPage">
	<summary>
 This is the url of the page the request is forwarded to if the admin check fails.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.erroremail">
	<summary>
 The email address error reports are sent to. 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.Page_Error(System.Object,System.EventArgs)">
	<summary>
 Handles an error on the current page. This is overidable.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.logEvent(System.String,System.String)">
	<summary>
 Adds an entry into the event log. By default the event group Web Event is added if permissions allow.
 </summary>
	<param name="anevent"></param>
	<param name="sourcename"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.isNull(System.Data.DataRow,System.String)">
	<summary>
 Returns true if a column is null or dbnull.value
 </summary>
	<param name="row"></param>
	<param name="colname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.JavaScriptEncode(System.String)">
	<summary>
  Performs JavaScript encoding on given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.JavaScriptUnencode(System.String)">
	<summary>
 Unencodes JavaScript characters from given string
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.ValidCookieName(System.String)">
	<summary>
 Ensures a string is compliant with cookie name requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.getQueryString(System.String[])">
	<summary>
 Returns the query string and excludes some of the parameters if needed.
 </summary>
	<param name="excludeKeys"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.GetUrlPath">
	<summary>
 Returns the full path of the current url. ex: /test/some/location.aspx
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.ValidCookieValue(System.String)">
	<summary>
 Ensures a string is compliant with cookie value requirements
 </summary>
	<param name="Str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.makeTableFromCSV(System.Web.HttpPostedFile)">
	<summary>
 Creates a datatable from a csv file posted to a web form.
 </summary>
	<param name="myFile"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.writeCSV(System.Data.DataTable,System.String[],System.Boolean)">
	<summary>
 Converts a datatable to csv format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.writeexcel(System.Data.DataTable,System.String[],System.Boolean,System.String)">
	<summary>
 Converts a datatable to excel format and writes csv data out to the responce stream.
 </summary>
	<param name="dt"></param>
	<param name="colNames"></param>
	<param name="asAttachment"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.EncryptText(System.String,System.String)">
	<summary>
 Encrypts and urlEncodes text string using a specific key.
 </summary>
	<param name="strText"></param>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseSecurityPage.DecryptText(System.String,System.String)">
	<summary>
 Decrypts and urlDecodes text string using a specific key.
 </summary>
	<param name="strText"></param>
	<param name="key"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.UrlReferrer">
	<summary>
 Referring url within this domain.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Will return Nothing on first page.  Must be set in code for all pages to track</remarks>
</member><member name="P:BaseClasses.BaseSecurityPage.EnablePageTracking">
	<summary>
 Enable tracking on this page. Default is false.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseSecurityPage">
	<summary>
 Base class for System.Web.UI.Page class, adding data accessors, error handeling and basic security. 
 </summary>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.#ctor(System.Data.Common.DbConnection@)">
	<summary>
 This is a template constructor for derived classes. It is inherited by subclasses.
 </summary>
	<param name="connection">The default connection object used for the life of the object.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.#ctor(System.String)">
	<summary>
 This is a template constructor for derived classes. It is inherited by subclasses.
 </summary>
	<param name="ConnectionString">The default connection String used for the life of the object.</param>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseHelper.defaultConnectionAppWide">
	<summary>
 Sets the default connection used by any dataHelper object that is not explicitly set. 
 This overrides any setting in the .config file.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseHelper.defaultConnection">
	<summary>
 The Connection used for all database comunication for the life of the object.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:BaseClasses.BaseHelper._enforceConstraints">
	<summary>
 When performing an update should errors be thrown in a constraint excepetion occures. 
 </summary>
	<remarks>Sets enforceconstraints=False if an error is encountered.</remarks>
</member><member name="P:BaseClasses.BaseHelper.createAdaptorsWithoutPrimaryKeys">
	<summary>
 Should update and delete methods be added to adaptors if there is no primary key information.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createConnection(System.String@)">
	<summary>
 Creates a typed connection from a string.
 </summary>
	<param name="ConnectionString"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createAdaptor(System.String,System.Data.Common.DbConnection)">
	<summary>
 Creates a DbDataAdapter from a command string.
 </summary>
	<param name="SQLcommand">Select command used to generate the DbDataAdapter</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns>a DbCommand typed to the base helper type.</returns>
	<remarks>The default connection uses web config connection string named 'DTIConnection' or 'ConnectionString'</remarks>
</member><member name="M:BaseClasses.BaseHelper.createCommand(System.String,System.Data.Common.DbConnection)">
	<summary>
 Creates a DbCommand from a command string.
 </summary>
	<param name="SQLcommand">Select command used to generate the DbCommand</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns>a DbCommand typed to the base helper type.</returns>
	<remarks>The default connection uses web config connection string named 'DTIConnection' or 'ConnectionString'</remarks>
</member><member name="M:BaseClasses.BaseHelper.createParameter(System.String,System.Object)">
	<summary>
 Creates a typed dbParameter from a name and value
 </summary>
	<param name="name">the parm name.</param>
	<param name="value">the parm value.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createParameter(System.Data.Common.DbParameter@)">
	<summary>
 Creates a typed parameter from a genric DbParameter
 </summary>
	<param name="parameter">the DbParameter</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createCommandBuilder(System.Data.Common.DbDataAdapter@)">
	<summary>
 Creates a typed DbCommandBuilder
 </summary>
	<param name="adaptor">The typed DbDataAdapter </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.checkDBObjectExists(System.String)">
	<summary>
 Checks if a datatable exists in a database.
 </summary>
	<param name="tablename">The name of the table that may eexist in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createTable(System.Data.DataTable)">
	<summary>
 Creates a table in the database based on the schema of the datatable passed in.
 </summary>
	<param name="dt">The datatable that is usedto createthe table in the database. Only schema is used, data is ignored.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.getCreateTableString(System.Data.DataTable)">
	<summary>
 Builds a create script for a table in the database based on the schema of the datatable passed in.
 </summary>
	<param name="dt">The datatable that is usedto build the create String. Only schema is used, data is ignored.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.setDefaultConnectionString(System.String)">
	<summary>
 Calls createConnection and using the supplied string and sets a new default connection. Also clears cached adaptors.
 </summary>
	<param name="connectionString">The ConnectionString as a string.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.getHelper">
	<summary>
 Shared function to return the current stored baseHelper used in a web application.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.createConnectionFromConfig(System.String)">
	<summary>
 creates a typed connection from a config vaue.
 </summary>
	<param name="ConfigValueName">The name of the config value</param>
	<returns>a typed DbConnection</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.parseID(System.String)">
	<summary>
 Parse an integer from a string value. 
 </summary>
	<param name="input"></param>
	<returns>Return the int value, or -1 if it fails.</returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.getSQLStatement(System.String,Microsoft.VisualBasic.Collection)">
	<summary>
 Generates complete sql statement from a base statement and a collection additional strings. Statements are and-ed together.
 </summary>
	<param name="selectStmt">Sql Command Text</param>
	<param name="AdditionalStmts">A collection of strings</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[])">
	<summary>
 Fills a specific table in a dataset. Pass parms to command like the following:
 FillDataSet("Select * from products where typeName =@type",ds,"products","Toys")
 </summary>
	<param name="SQLcommand">Sql Command Text</param>
	<param name="ds"></param>
	<param name="tableName"></param>
	<param name="parms">Parameter values added to the SQLCommand.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FillDataSetMultiSelect(System.String,System.Data.DataSet@,System.String[],System.Object[])">
	<summary>
 Fill multiple tables in a dataset. Example as following:
 FillDataSetMultiSelect("Select * from products where typeName =@type; Select * from catagories where name = @catname",ds, new String (){"products","catagories"},"Toys","Childrens products")
 </summary>
	<param name="SQLcommand">Sql Command Text</param>
	<param name="ds"></param>
	<param name="tblNames"></param>
	<param name="parms">Parameter values added to the SQLCommand.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean@)">
	<summary>
 Opens a DbCommand and waits for the connection execute. 
 </summary>
	<param name="command">typed dBCommand object</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<param name="transaction"></param>
	<param name="commandType"></param>
	<param name="commandText"></param>
	<param name="commandParameters"></param>
	<param name="mustCloseConnection"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.AttachParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
	<summary>
 Adds paramters to a command.
 </summary>
	<param name="command"></param>
	<param name="commandParameters"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ExecuteNonQuery(System.String,System.Data.Common.DbConnection)">
	<summary>
 Executes a Sql command string that does not return tabular data. 
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Object[])">
	<summary>
 Fills a dataTable from a select string. Pass parms to command like the following:
 FillDataTable("Select * from products where typeName=@type and department=@dept",dt,"Toys","children")
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="table"></param>
	<param name="parms">Parameter values added to the SQLCommand.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Data.DataTable@,System.Data.Common.DbConnection@)">
	<summary>
 Fills a dataTable from a select string. Pass parms to command like the following:
 FillDataTable("Select * from products where typeName=@type and department=@dept",dt,"Toys","children")
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="table"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FillDataTable(System.String,System.Object[])">
	<summary>
 Fills a dataTable from a select string. Pass parms to command like the following:
 FillDataTable("Select * from products where typeName=@type and department=@dept",dt,"Toys","children")
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="parms">Parameter values added to the SQLCommand.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ColumnFilterFillDataTable(System.String,System.Data.DataTable@,Microsoft.VisualBasic.Collection,Microsoft.VisualBasic.Collection,System.String,System.Data.Common.DbConnection)">
	<summary>
 Fill a datatable with a value for each listed column. statements are anded together.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="table"></param>
	<param name="colmnNames"></param>
	<param name="Values"></param>
	<param name="additionalString"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ColumnFilterFillDataTable(System.String,System.Data.DataTable@,Microsoft.VisualBasic.Collection,System.Data.Common.DbConnection)">
	<summary>
 Fill a datatable with a value for each listed column. statements are anded together.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="table"></param>
	<param name="AdditionalStmts"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ColumnFilterFillDataTable(System.String,System.Data.DataTable@,System.String[],System.Object[],System.String,System.Data.Common.DbConnection)">
	<summary>
 Fill a datatable with a value for each listed column. statements are anded together.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="table"></param>
	<param name="colmnNames"></param>
	<param name="Values"></param>
	<param name="additionalString"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ExecuteSproc(System.String,System.Data.DataSet@,System.Data.Common.DbParameter[]@,System.Data.Common.DbConnection)">
	<summary>
 Execute a stored procedure.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="ds"></param>
	<param name="pararray"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FetchSingleValue(System.String,System.Data.Common.DbConnection)">
	<summary>
 Fetches a single value from a datastore.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.FetchSingleValue(System.String,System.Object[])">
	<summary>
 Fetches a single value from a datastore.
 </summary>
	<param name="SQLcommand">Sql command string</param>
	<param name="parms">optional parameters to pass to the select statement. Last one may be a connection.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeFetchSingleValue(System.String,System.Object[],System.Data.Common.DbConnection)">
	<summary>
 Fetches a single value from a database.
 </summary>
	<param name="SQLcommand">Sql Command Text</param>
	<param name="parmValueArray"></param>
	<param name="connection">optional dBConnection that will override the default conection.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeExecuteNonQuery(System.String,System.Object[],System.Data.Common.DbConnection)">
	<summary>
 Executes a Sql command string that does not return tabular data. Takes a parm list as arguments.
 SafeExecuteNonQuery("delete from useres where id = @id",7)
 </summary>
	<param name="SQLcommand">Sql Command Text</param>
	<param name="parmValueArray">Array or parameters</param>
	<param name="connection">dBConnection that will override the default conection.</param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeFillErrorCatcher(System.Data.Common.DbDataAdapter@,System.Data.DataSet@)">
	<summary>
 Protected error catcher that will send the select command up to error stack for easier debugging.
 </summary>
	<param name="da"></param>
	<param name="ds"></param>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseHelper.connectionFromStack(System.Data.Common.DbConnection)">
	<summary>
 If connection are qued this will return the next available one. 
 </summary>
	<param name="connection"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.prepareAdaptor(System.String,System.Data.Common.DbConnection@)">
	<summary>
 An overidable method for subclasses to add formatting and utility code to derived classes
 </summary>
	<param name="SQLcommand"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.processSelectCommand(System.String)">
	<summary>
 An overidable method for subclasses to add formatting and utility code to derived classes
 </summary>
	<param name="SQLcommand"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.prepareSafeFillAdaptor(System.String,System.Object[],System.Data.Common.DbConnection)">
	<summary>
 Creates an adaptor froma sql string
 </summary>
	<param name="SQLcommand"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeFillDataSetMultiSelect(System.String,System.Data.DataSet@,System.String[],System.Object[]@,System.Data.Common.DbConnection)">
	<summary>
 Fill multiple tables in a dataset. Example as following:
 FillDataSetMultiSelect("Select * from products where typeName =@type; Select * from catagories where name = @catname",ds, new String (){"products","catagories"},"Toys","Childrens products")
 </summary>
	<param name="SQLcommand"></param>
	<param name="ds"></param>
	<param name="tblNames"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeFillTable(System.String,System.Data.DataTable@,System.Object[]@,System.Data.Common.DbConnection)">
	<summary>
	</summary>
	<param name="SQLcommand"></param>
	<param name="dt"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SafeFillDataSet(System.String,System.Data.DataSet@,System.String,System.Object[]@,System.Data.Common.DbConnection)">
	<summary>
 Fill multiple tables in a dataset. Example as following:
 SafeFillDataSetMultiSelect("Select * from products where typeName =@type; Select * from catagories where name = @catname",ds, new String (){"products","catagories"},new Object(){"Toys","Childrens products"})
 </summary>
	<param name="SQLcommand">Sql Command Text</param>
	<param name="ds"></param>
	<param name="tablename"></param>
	<param name="parmValueArray"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.checkAndCreateTable(System.Data.DataTable)">
	<summary>
 Checks for and creates a datatable if one does not exist in the database.
 </summary>
	<param name="dt">Datatable schema to create in the database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.checkAndCreateAllTables(System.Data.DataSet)">
	<summary>
 Cheacks and createsevery dataTable in a dataSet.
 </summary>
	<param name="ds">The dataSet to add to the current database.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.ProcessDataAdaptor(System.Data.Common.DbDataAdapter@,System.String,System.Data.DataTable)">
	<summary>
 Called on creation of a new DbAdaptor
 </summary>
	<param name="da"></param>
	<param name="TableName"></param>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:BaseClasses.BaseHelper.Adaptor(System.String,System.Data.Common.DbConnection,System.Data.DataTable)">
	<summary>
 Property that returns a data adaptor for the passed in tale name. Caches the adaptor after the first call for the life of this object.
 </summary>
	<param name="TableName"></param>
	<param name="connection"></param>
	<param name="dt"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.cloneSQLAdaptor(System.Data.Common.DbDataAdapter,System.Data.Common.DbConnection)">
	<summary>
 Utility function to create a deep copy of a DbDataAdapter object.
 </summary>
	<param name="da"></param>
	<param name="connection"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.cloneDbCommand(System.Data.Common.DbCommand)">
	<summary>
 Utility function to create a deep copy of a DbCommand object.
 </summary>
	<param name="dc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.UpdateCreateDB(System.Data.DataTable@,System.String,System.Boolean,System.Data.Common.DbConnection@)">
	<summary>
 Update a given datatable, and create it if it dosen't exist in the database.
 </summary>
	<param name="dt"></param>
	<param name="TableName"></param>
	<param name="ContinueUpdateOnError"></param>
	<param name="connection"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.Update(System.Data.DataTable@)">
	<summary>
 Performs all inserts,updates and deletes on a database froma provided datatable. Uses the table name from the dataTable and pushes the changes to the table in the database with the same name. 
 </summary>
	<param name="dt"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.Update(System.Object)">
	<summary>
 Performs all inserts,updates and deletes on a database froma provided datatable. Uses the table name from the dataTable and pushes the changes to the table in the database with the same name. 
 </summary>
	<param name="dt"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.UpdateAndReturn(System.Data.DataTable)">
	<summary>
 The same as Update, only the table does not need to be passed byref and is returned by the call. Helps passing in C#
 </summary>
	<param name="dt"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.Update(System.Data.DataTable@,System.String,System.Boolean,System.Data.Common.DbConnection@)">
	<summary>
 Performs all inserts,updates and deletes on a database froma provided datatable. Uses the table name from the dataTable and pushes the changes to the table in the database with the same name. 
 </summary>
	<param name="dt"></param>
	<param name="TableName"></param>
	<param name="ContinueUpdateOnError"></param>
	<param name="connection"></param>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.stripSQLStringOfDanger(System.String)">
	<summary>
 A preventatie mesure to make sure getSortedPage is not vulnerable to sql injection.
 </summary>
	<param name="tablename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SQLHelperException.sqlEx(System.Data.Common.DbCommand,System.Exception)">
	<summary>
 SQL Exception helper classes
 </summary>
	<param name="cmd"></param>
	<param name="innerException"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SQLHelperException.sqlEx(System.Data.Common.DbDataAdapter,System.Data.DataTable,System.Exception)">
	<summary>
 SQL Exception helper classes
 </summary>
	<param name="adaptor"></param>
	<param name="dt"></param>
	<param name="innerException"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:BaseClasses.BaseHelper.SQLHelperException.sqlEx(System.String,System.Exception)">
	<summary>
 SQL Exception helper classes
 </summary>
	<param name="slqString"></param>
	<param name="innerException"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseHelper.SQLHelperException">
	<summary>
 An exception class used to give more complete information when database errors occure. It will proved all SQL commands plus all parameters that were provided. Use caution as this can expose SQL statements to the end user.
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.BaseHelper">
	<summary>
 A generic data access layer. This is subclassed for different database types. MSSql and SQLLite included in the base dll. 
 </summary>
	<remarks></remarks>
</member><member name="T:BaseClasses.AssemblyLoader">
	<summary>
 Utility class to load and cache assemblies. Caching is done in BaseVirtualPathProvider.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>